from telethon import events
import asyncio
from random import randint
from modules.peh.gps import *
from modules.starter.starter import client, hero, const


async def get_peh_point(text):
    if text in ["–∞–ª—å—Ñ–∞", "–∞–ª—å"]:
        point_name = '–ê–ª—å—Ñ–∞'
    elif text in ['—Ç–∞—Ñ']:
        point_name = '–¢–∞—Ñ'
    elif text in ['–¥–∏–≥', "–¥–∏–≥–∞–º–∞", "–¥–∏–≥–∞–º–º–∞"]:
        point_name = '–î–∏–≥–∞–º–º–∞'
    elif text in ['–∫—Å–∏']:
        point_name = '–ö—Å–∏'
    elif text in ["–±", '–±–∞–∑–∞']:
        point_name = '–ë–∞–∑–∞'
    elif text in ["–∫", '–∫–∞–ø', "–∫–∞–ø–∞", "–∫–∞–∞–ø–∞", "–∫–∞–ø–ø–∞"]:
        point_name = '–ö–∞–ø–ø–∞'
    elif text in ['—Å—Ç–∏–≥', "—Å—Ç–∏–≥–º–∞"]:
        point_name = '–°—Ç–∏–≥–º–∞'
    elif text in ['–≤–∏', "–≤–∏—Ç–∞"]:
        point_name = '–í–∏—Ç–∞'
    elif text in ['–¥–µ–ª—å', "–¥–µ–ª—å—Ç", "–¥–µ–ª—å—Ç–∞"]:
        point_name = '–î–µ–ª—å—Ç–∞'
    elif text in ['–æ–º', "–æ–º–µ–≥", "–æ–º–µ–≥–∞"]:
        point_name = '–û–º–µ–≥–∞'
    elif text in ['–≥–∞–º', "–≥–∞–º–∞", "–≥–∞–º–º–∞"]:
        point_name = '–ì–∞–º–º–∞'
    elif text in ['–π–æ', "–π–æ—Ç", "–π–æ—Ç–∞"]:
        point_name = '–ô–æ—Ç–∞'
    elif text in ['—Ç–µ—Ç', "—Ç–µ—Ç–∞", "—Ç–µ—Ç—Ç–∞"]:
        point_name = '–¢–µ—Ç—Ç–∞'
    elif text in ['–∏—Ç', "–∏—Ç–∞", "–∏—Ç—Ç–∞"]:
        point_name = '–ò—Ç—Ç–∞'
    elif text in ['–¥–∑', "–¥–∑–∏", "–¥–∑–∏—Ç", "–¥–∑–∏—Ç–∞"]:
        point_name = '–î–∑–∏—Ç–∞'
    elif text in ['—ç', "—ç–ø—Å", "—ç–ø—Å–∏", "—ç–ø—Å–∏–ª–æ–Ω", "—ç–ø—Å–∏–ª–æ–Ω–Ω"]:
        point_name = '–≠–ø—Å–∏–ª–æ–Ω–Ω'
    else:
        point_name = 'ERROR'
    return point_name


@events.register(events.NewMessage(from_users='NebulaHelperBot'))
async def peh_handler(event):
    if hero['mode'] == 'peh':
        message = event.message.to_dict()
        text = message['message']
        if text.startswith('‚öîÔ∏è '):
            pin = text.split('\n')[0].split(' ')[1]
            const["pin_point"] = await get_peh_point(pin.lower())
            await update_peh_list()


async def update_peh_list():
    const["peh_list"] = []
    station_names = ['–ê–ª—å—Ñ–∞', '–¢–∞—Ñ', '–î–∏–≥–∞–º–º–∞', '–ö—Å–∏', '–ë–∞–∑–∞', '–ö–∞–ø–ø–∞', '–°—Ç–∏–≥–º–∞', '–í–∏—Ç–∞', '–î–µ–ª—å—Ç–∞', '–û–º–µ–≥–∞', '–ì–∞–º–º–∞',
                     '–ô–æ—Ç–∞', '–¢–µ—Ç—Ç–∞', '–ò—Ç—Ç–∞', '–î–∑–∏—Ç–∞', '–≠–ø—Å–∏–ª–æ–Ω–Ω']
    if const["pin_point"] != 'ERROR' and const["pin_point"] != '':
        gps_track = gps(hero['loc'], const["pin_point"])
        for p in range(len(gps_track["path"])):
            if p != 0:
                print(station_names[gps_track["path"][p]])
                if station_names[gps_track["path"][p]] == '–ë–∞–∑–∞':
                    const["peh_list"].append('üèõ –ë–∞–∑–∞ –î—Ä–æ–∏–¥–æ–≤')
                else:
                    const["peh_list"].append(station_names[gps_track["path"][p]])
        if const["peh_list"] and hero['state'] == 'alive':
            await client.send_message(const['game'], const["peh_list"][0])
            const["peh_list"].pop(0)


async def peh_runner(text):
    if '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é' in text:
        hero['state'] = 'dead'
    if '–í—ã –≤–æ—Å–∫—Ä–µ—à–µ–Ω—ã' in text:
        hero['state'] = 'alive'
    if '–í—ã –ø—Ä–∏–±—ã–ª–∏ –Ω–∞ –ª–æ–∫–∞—Ü–∏—é "–û—Å—Ç—Ä–æ–≤–∞ –ì—Ä—ë–∑"' in text:
        hero['loc'] = '–ë–∞–∑–∞'
        hero['state'] = 'alive'
        await client.send_message(const["game"], 'üõ† –¢–µ—Ö–æ—Å–º–æ—Ç—Ä')
        await asyncio.sleep(randint(5, 10))
        await update_peh_list()
    if 'üö© –í—ã –ø—Ä–∏–±—ã–ª–∏ –≤ –ª–æ–∫–∞—Ü–∏—é: ' in text:
        hero['state'] = 'alive'
        hero['loc'] = text.split('–ª–æ–∫–∞—Ü–∏—é: ')[1].split('.')[0].split(' ')[1]
        if hero['loc'] == '–ë–∞–∑–∞':
            await asyncio.sleep(1)
            await client.send_message(const["game"], 'üõ† –¢–µ—Ö–æ—Å–º–æ—Ç—Ä')
        await asyncio.sleep(1)
        if const["peh_list"]:
            await client.send_message(const["game"], const["peh_list"][0])
            const["peh_list"].pop(0)
