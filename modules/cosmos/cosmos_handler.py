import asyncio
import math
from random import randint
from modules.starter.starter import client, hero, const
from modules.game.fight_sim import fight_simulation
from telethon.tl.types import ReplyKeyboardMarkup
from modules.cosmos.galaxy_gps import galaxy_gps, get_planet_seq
from modules.cosmos.planet_seek_mob import seek_mob
from modules.cosmos.planet_seek_prof import seek_prof
from modules.cosmos.planet_seek_ship import seek_ship
from modules.game.after_fight import after_fight
from modules.utils.files import update_file
from modules.utils.script_tools import change_status

ship_modules_list = ['üõ´ –í–∑–ª–µ—Ç–Ω—ã–π –£—Å–∫–æ—Ä–∏—Ç–µ–ª—å: ', '‚úàÔ∏è –ò–º–ø—É–ª—å—Å–Ω—ã–π –î–≤–∏–≥–∞—Ç–µ–ª—å: ', '‚òÑÔ∏è –ì–∏–ø–µ—Ä–¥–≤–∏–≥–∞—Ç–µ–ª—å: ',
                     'üè• –°–∏—Å—Ç–µ–º–∞ –ò—Å—Ü–µ–ª–µ–Ω–∏—è: ', 'üßø –ü–ª–∞–Ω–µ—Ç–∞—Ä–Ω—ã–π —Å–∫–∞–Ω–µ—Ä: ', 'üëÄ –ú–æ–¥—É–ª—å –≠–ª–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –í–∏–¥–µ–Ω–∏—è: ',
                     'ü™™ –ò–º—è: ', 'üöÄ –ú–æ–¥–µ–ª—å: ', 'üß© –¢–∏–ø: ', 'üèÖ –ö–ª–∞—Å—Å: ']
full_energy_list = ['üåè –°–µ—Ä–≤–µ—Ä –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.\n\n‚ö°Ô∏è –≠–Ω–µ—Ä–≥–∏—è –≤–æ—Å–ø–æ–ª–Ω–µ–Ω–∞',
                    '‚ö°Ô∏è –≠–Ω–µ—Ä–≥–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ –º–∞–∫—Å–∏–º—É–º–∞!',
                    '–í—ã –≤–æ—Å–ø–æ–ª–Ω–∏–ª–∏ —ç–Ω–µ—Ä–≥–∏—é!']


async def cosmos(event):
    message = event.message
    text = message.text
    buttons = []
    if hasattr(message, 'reply_markup') and type(message.reply_markup) == ReplyKeyboardMarkup:
        buttons = message.reply_markup
    if any(fel in text for fel in full_energy_list):
        hero['hero']['energy'] = 5
        await asyncio.sleep(randint(1, 3))
        hero['state'] = 'map seeker'
        await client.send_message(const['game'], 'üó∫ –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å')
    if '‚ö†Ô∏è –í –∏–º–ø—É–ª—å—Å–Ω–æ–º –¥–≤–∏–≥–∞—Ç–µ–ª–µ –Ω–µ—Ç —Ç–æ–ø–ª–∏–≤–∞' in text:
        await asyncio.sleep(randint(1, 3))
        await client.send_message(const['game'], 'üöÄ –ö–æ—Ä–∞–±–ª—å')
        hero['state'] = 'ship needs impulse'
    if 'üõ† –ò–Ω–∂–µ–Ω–µ—Ä–Ω—ã–π –º–æ—Å—Ç–∏–∫.\n\n' in text:
        msg_id = message.id
        if int(text.split('üõ´ –í–∑–ª–µ—Ç–Ω—ã–π –£—Å–∫–æ—Ä–∏—Ç–µ–ª—å: ‚õΩÔ∏è ')[1].split('/')[0]) == 0:
            hero['state'] = 'ship needs takeoff'
        elif int(text.split('‚úàÔ∏è –ò–º–ø—É–ª—å—Å–Ω—ã–π –î–≤–∏–≥–∞—Ç–µ–ª—å: üéá ')[1].split('/')[0]) == 0:
            hero['state'] = 'ship needs impulse'
        await event.click(text='üßØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ø–ª–∏–≤–æ')
        await asyncio.sleep(1)
        new_msg = await client.get_messages(const['game'], ids=msg_id)
        buttons_list = []
        buttons_rows = new_msg.reply_markup.rows
        for row in buttons_rows:
            bts = row.buttons
            for b in bts:
                buttons_list.append(b.text)
        f_button = ''
        if hero['state'] == 'ship needs takeoff' and any(x.split('(')[0] == '‚õΩÔ∏è –í–∑–ª–µ—Ç–Ω–æ–µ —Ç–æ–ø–ª–∏–≤–æ ' for x in buttons_list):
            f_button = next(b for b in buttons_list if b.split('(')[0] == '‚õΩÔ∏è –í–∑–ª–µ—Ç–Ω–æ–µ —Ç–æ–ø–ª–∏–≤–æ ')
        elif hero['state'] == 'ship needs impulse' and any(x.split('(')[0] == 'üéá –ò–º–ø—É–ª—å—Å–Ω–æ–µ —Ç–æ–ø–ª–∏–≤–æ ' for x in buttons_list):
            f_button = next(b for b in buttons_list if b.split('(')[0] == 'üéá –ò–º–ø—É–ª—å—Å–Ω–æ–µ —Ç–æ–ø–ª–∏–≤–æ ')
        await new_msg.click(text=f_button)
        hero['state'] = 'ready to go space'
        await asyncio.sleep(randint(1, 3))
        await client.send_message(const['game'], '/buttons')
    if all(x in text for x in ship_modules_list) and hero['state'].startswith('ship needs '):
        await asyncio.sleep(randint(1, 3))
        await event.click(0)
    if hero['cur_loc'] == 'üåé –ù–æ–≤—ã–π –≠–¥–µ–º':
        if '–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é' in text:
            await asyncio.sleep(randint(1, 5))
            await client.send_message(const['game'], 'üöÖ –í–æ–∑–¥—É—à–Ω—ã–π –ü–æ—Ä—Ç')
        if 'üöà –í—ã –ø—Ä–∏–±—ã–ª–∏ –≤ –≤–æ–∑–¥—É—à–Ω—ã–π –ø–æ—Ä—Ç' in text:
            await asyncio.sleep(randint(1, 3))
            await client.send_message(const['game'], 'üöÄ –ö–æ—Å–º–æ–¥—Ä–æ–º - Œ©-1')
        if '–ü—É—Ç—å –ê.–¢.–õ.–ê.–°.-–∞ –∂–¥–µ—Ç –≤–∞—Å' in text:
            await asyncio.sleep(randint(1, 3))
            await client.send_message(const['game'], 'üî• –°—Ç–∞—Ä—Ç')
        if 'üõ∞ –í—ã –Ω–∞ –æ—Ä–±–∏—Ç–µ' in text:
            await asyncio.sleep(randint(1, 3))
            await event.click(text='üåå –ö–æ—Å–º–æ—Å')
            hero['cur_loc'] = 'üåå –ö–æ—Å–º–æ—Å'
            hero["space"]['space_seq'] = 'A0'
    if hero['cur_loc'] == 'üåå –ö–æ—Å–º–æ—Å' and buttons:
        buttons_list = []
        buttons_rows = buttons.rows
        # print(buttons_rows)
        for row in buttons_rows:
            bts = row.buttons
            for b in bts:
                buttons_list.append(b.text)
        print(buttons_list)
        if any(x.split(' ')[0] in ['‚ÜñÔ∏è', '‚¨ÜÔ∏è', '‚ÜóÔ∏è', '‚ÜôÔ∏è', '‚¨áÔ∏è', '‚ÜòÔ∏è'] for x in buttons_list):
            await asyncio.sleep(randint(1, 3))
            path = galaxy_gps()
            if path == 'Done':
                await event.click(text='üåè –û—Ä–±–∏—Ç–∞')
                hero['state'] = 'landing'
            elif len(path) > 1:
                path_dir = next(p for p in buttons_list if path[1] in p)
                await event.click(text=path_dir)
            # hero['space_seq'] = path[1]
    if text.startswith('üõ∞ ') and '‚ò£Ô∏è –¢–∏–ø: ' in text and 'üåé –í–∏–¥: ' in text and hero['state'] != 'after fight':
        planet_name = text.split('üõ∞ ')[1].split('\n\n')[0].split('**')[1]
        hero['cur_loc'] = planet_name
        planet_seq = get_planet_seq(planet_name)
        hero['space']['space_seq'] = planet_seq
        # hero['state'] = 'map seeker'
    if 'üõ∞Ô∏è –í—ã –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å –≤ —Å–µ–∫—Ç–æ—Ä ' in text:
        hero["space"]['space_seq'] = text.split(' –≤ —Å–µ–∫—Ç–æ—Ä ')[1].split('.')[0]
    if 'üõ∞ –í—ã –Ω–∞ –æ—Ä–±–∏—Ç–µ –ø–ª–∞–Ω–µ—Ç—ã ' in text and hero['state'] == 'landing':
        await asyncio.sleep(randint(1, 3))
        await event.click(text='üåè –ü–æ—Å–∞–¥–∫–∞')
    if 'üåè –í—ã –ø—Ä–∏–∑–µ–º–ª–∏–ª–∏—Å—å –Ω–∞ –ø–ª–∞–Ω–µ—Ç—É ' in text:
        hero['cur_loc'] = text.split('üåè –í—ã –ø—Ä–∏–∑–µ–º–ª–∏–ª–∏—Å—å –Ω–∞ –ø–ª–∞–Ω–µ—Ç—É ')[1].split('.')[0]
        hero['state'] = 'map seeker'
        await asyncio.sleep(randint(1, 3))
        await event.click(text='üó∫ –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å')
    if '+1 –∫ —ç–Ω–µ—Ä–≥–∏–∏ (4/5)' in text:
        print('get 4 energy')
        hero['state'] = 'map seeker'
        await asyncio.sleep(randint(1, 3))
        await client.send_message(const['game'], 'üó∫ –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å')
    if ('üåê –ó–∞—â–∏—Ç–∞ –û—Ç –í—Ä–µ–¥–Ω—ã—Ö –§–∞–∫—Ç–æ—Ä–æ–≤:\n' in text or 'üå¨ –°–∏—Å—Ç–µ–º–∞ –ñ–∏–∑–Ω–µ–æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è:\n' in text) \
            and '- –£—Ä–æ–≤–µ–Ω—å –∑–∞—Ä—è–¥–∞ –º–æ–¥—É–ª—è —ç–∫–∑–æ—Å–∫–µ–ª–µ—Ç–∞ –¥–æ—Å—Ç–∏–≥ –∑–Ω–∞—á–µ–Ω–∏—è 20 –∏–ª–∏ –Ω–∏–∂–µ. ' \
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ø–ª–∏–≤–æ –∏–ª–∏ –∑–∞–º–µ–Ω–∏—Ç–µ –º–æ–¥—É–ª—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å ' in text:
        await asyncio.sleep(randint(1, 3))
        if 'üå¨ –°–∏—Å—Ç–µ–º–∞ –ñ–∏–∑–Ω–µ–æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è:\n' in text:
            await client.send_message(const['game'], '/fuel_oxy')
        elif 'üåê –ó–∞—â–∏—Ç–∞ –û—Ç –í—Ä–µ–¥–Ω—ã—Ö –§–∞–∫—Ç–æ—Ä–æ–≤:\n' in text:
            await client.send_message(const['game'], '/fuel_def')
    if '–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∑–∞—Ä—è–¥' in text:
        await asyncio.sleep(randint(1, 3))
        buttons_list = []
        buttons_rows = message.reply_markup.rows
        for row in buttons_rows:
            bts = row.buttons
            for b in bts:
                if ' (üéí' in b.text and int(b.text.split(' (üéí')[1].split(')')[0]) > 15:
                    buttons_list.append(b.text)
        print(f'buttons_list oxy: {buttons_list}')
        if buttons_list:
            print(f'clicking: {buttons_list[0]}')
            await event.click(text=buttons_list[0])
        else:
            hero['mode'] = 'stop'
            await client.send_message('me', '(üå¨/üåê) –ó–∞–∫–æ–Ω—á–∏–ª—Å—è –∫–∏—Å–ª–æ—Ä–æ–¥ –∏–ª–∏ –∑–∞—â–∏—Ç–∞. –ë–æ—Ç –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø–∞—É–∑—É.')
    if ('üåê –ó–∞—â–∏—Ç–∞ –û—Ç –í—Ä–µ–¥–Ω—ã—Ö –§–∞–∫—Ç–æ—Ä–æ–≤:\n' in text or 'üå¨ –°–∏—Å—Ç–µ–º–∞ –ñ–∏–∑–Ω–µ–æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è:\n' in text) \
            and 'üöÄ –°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —É–≥—Ä–æ–∑ –∫–æ—Ä–∞–±–ª—è ' in text \
            and '—Ä–∞–∑—Ä—è–∂–µ–Ω–∞. –®–ª—é–∑ –Ω–µ –±—ã–ª –æ—Ç–∫—Ä—ã—Ç, —Ç–∞–∫ –∫–∞–∫ –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –í—ã —É–º—Ä–µ—Ç–µ' in text:
        await asyncio.sleep(randint(1, 3))
        if 'üå¨ –°–∏—Å—Ç–µ–º–∞ –ñ–∏–∑–Ω–µ–æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è:\n' in text:
            await client.send_message(const['game'], '/fuel_oxy')
        elif 'üåê –ó–∞—â–∏—Ç–∞ –û—Ç –í—Ä–µ–¥–Ω—ã—Ö –§–∞–∫—Ç–æ—Ä–æ–≤:\n' in text:
            await client.send_message(const['game'], '/fuel_def')
    # if 'üöÄ –°–∏—Å—Ç–µ–º–∞ –ò—Å—Ü–µ–ª–µ–Ω–∏—è –∫–æ—Ä–∞–±–ª—è' in text and '- –ù–∞—á–∞–ª–∞—Å—å —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–¥–æ—Ä–æ–≤—å—è' in text:
    #     hero['state'] = 'restore hp near ship'
    if 'üöÄ –°–∏—Å—Ç–µ–º–∞ –ò—Å—Ü–µ–ª–µ–Ω–∏—è –∫–æ—Ä–∞–±–ª—è:\n- –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–¥–æ—Ä–æ–≤—å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.' in text:
        hero["hero"]['cur_hp'] = hero["hero"]['max_hp']
        hero['state'] = 'map seeker'
        await asyncio.sleep(randint(3, 5))
        await client.send_message(const['game'], 'üó∫ –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å')
    if text.startswith('‚ù§Ô∏è HP: ') and ' /mapSize /mType /cruiseOn' in text \
            and hero['state'] in ['map seeker', 'back to ship']:
        print(f"Got map, current status: {hero['state']}")
        await asyncio.sleep(randint(1, 3))
        if hero["space"]['planet_size'] == 0:
            await client.send_message(const['game'], '/mapSize')
            await asyncio.sleep(1)
            new_msg = await client.get_messages(const['game'], limit=1)
            buttons_list = []
            buttons_rows = new_msg[0].reply_markup.rows
            for row in buttons_rows:
                bts = row.buttons
                for b in bts:
                    buttons_list.append(b.text)
            hero["space"]['planet_size'] = int(buttons_list[1])
            await asyncio.sleep(randint(1, 3))
            await new_msg[0].click(text='‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å')
        else:
            const['space_map_msg'] = message.id
            my_pos = ((hero["space"]['planet_size'] - 1) / 2, (hero['space']['planet_size'] - 1) / 2)
            target = (math.inf, math.inf)
            if hero['state'] == 'back to ship':
                print('ready to back to ship')
                while target != my_pos:
                    new_msg = await client.get_messages(const['game'], ids=const['space_map_msg'])
                    text = new_msg.message
                    target = await seek_ship(text, target, my_pos)
            elif hero['state'] == 'map seeker':
                win_chance = await fight_simulation()
                print(f"win chance: {win_chance}")
                if hero["hero"]['energy'] > 0:
                    if win_chance >= 100:
                        target = await seek_mob(text, target, my_pos)
                    else:
                        hero['state'] = 'back to ship'
                        while target != my_pos:
                            new_msg = await client.get_messages(const['game'], ids=const['space_map_msg'])
                            text = new_msg.message
                            target = await seek_ship(text, target, my_pos)
                elif hero["hero"]['energy'] == 0 and hero['mode'] == 'boost' and hero["hero"]['intox'] is False:
                    if win_chance >= 100:
                        await asyncio.sleep(randint(2, 7))
                        await client.send_message(const["game"], '/potions')
                        await asyncio.sleep(randint(2, 7))
                        target = await seek_mob(text, target, my_pos)
                    else:
                        hero['state'] = 'back to ship'
                        while target != my_pos:
                            target = await seek_ship(text, target, my_pos)
                elif hero["hero"]['energy'] == 0 and (hero['mode'] == 'farm' or hero["hero"]['intox'] is True):
                    print('going to farm prof')
                    hero['state'] = 'going to farm prof'
                    await change_status("–ò–¥—É –Ω–∞ –ø—Ä–æ—Ñ—É")
                    await asyncio.sleep(randint(2, 5))
                    target = await seek_prof(text, target, my_pos)
            if type(target) == list and target[0] == 'No path':
                path = target[1]
                await client.send_message(const['game'], path[0])
                await asyncio.sleep(randint(3, 5))
                await client.send_message(const['game'], 'üó∫ –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å')
            elif target == my_pos and hero['state'] != 'back to ship':
                await asyncio.sleep(1)
                new_msg = await client.get_messages(const['game'], ids=const['space_map_msg'])
                text = new_msg.message

                hero['state'] = 'ready to action'
                await asyncio.sleep(1)
                await client.send_message(const['game'], 'üöÄ‚öîÔ∏èüèîÔ∏è')
    if 'üß¨ –í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ: ' in text and 'üïπ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ?' in text and hero['state'] == 'ready to action':
        hero["hero"]['cur_hp'] = int(text.replace('üíî', '').replace('‚ù§Ô∏è', '').split('üß¨ –í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ: ')[1].split('/')[0])
        await asyncio.sleep(randint(1, 3))
        if hero["hero"]['cur_hp'] < hero['hero']['max_hp'] and hero['farm_cfg']['force_heal'] and hero['space']['cosmos']:
            hero['state'] = 'back to ship'
            await client.send_message(const['game'], 'üó∫ –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å')
        else:
            target_mob_lvl = int(text.split('–£—Ä:')[1].split(' ')[0])
            win_chance = await fight_simulation(optional_mob=target_mob_lvl)
            if win_chance >= 100 and hero["hero"]['energy'] > 0:
                print(f'Can still fight with chance of {win_chance}')
                await change_status(f"–ì–æ—Ç–æ–≤ –±–∏—Ç—å, —à–∞–Ω—Å –Ω–∞ —É—Å–ø–µ—Ö: {win_chance}")
                hero['state'] = 'starts fight'
                await event.click(0)
            elif win_chance >= 99.5 and hero["hero"]['energy'] == 0 and hero['mode'] == 'boost' and not hero["hero"]['intox']:
                await client.send_message(const["game"], '/potions')
            else:
                hero['state'] = 'back to ship'
                await client.send_message(const['game'], 'üó∫ –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å')
    if '–í—ã –≤—Å—Ç—É–ø–∞–µ—Ç–µ –≤ –±–æ–π —Å:' in text:
        hero['state'] = 'after fight'
        print(f'going to AFTER FARM, status cur: {hero["state"]}')
        await after_fight(text)
    if '‚è±Ô∏è –†–∞–∑–º–µ—Ä: ' in text and 'üî´ –ú—É–ª—å—Ç–∏—Ç—É–ª:' in text and 'üë• –ü–∏–ª–æ—Ç–æ–≤:' in text:
        await asyncio.sleep(1)
        await event.click(0)
    if '‚ö†Ô∏è –†–µ—Å—É—Ä—Å –∏—Å—Ç–æ—â–µ–Ω, —Ä–∞—Å—â–µ–ø–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ' in text:
        print('Prof resource is empty, looking for new one')
        await asyncio.sleep(randint(1, 3))
        hero['state'] = 'map seeker'
        await client.send_message(const['game'], 'üó∫ –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å')
    if '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' in text and 'Too Many Requests: retry after' in text:
        prev_state = hero['state']
        hero['state'] = 'waiting for error'
        time_to_wait = int(text.split('Too Many Requests: retry after ')[1].split('.')[0])
        await asyncio.sleep(time_to_wait)
        hero['state'] = prev_state
        await client.send_message(const['game'], 'üó∫ –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å')
    if 'üéí –ó–∞–ø–∞—Å ' in text and 'üìñ –û–ø—ã—Ç: ' in text and 'üó∫Ô∏è –ö–∞—Ä—Ç–∞: /map' in text:
        const['farm_received']['exp'] += int(text.split('üìñ –û–ø—ã—Ç: ')[1].split('\n')[0].replace(' ', ''))
        got_resource_raw = text.split(' (')[0]
        got_resource = ''
        if got_resource_raw == 'üÖæÔ∏è':
            got_resource = '–ö–∏—Å–ª–æ—Ä–æ–¥'
        elif got_resource_raw == '‚ö™Ô∏è':
            got_resource = '–ê–∑–æ—Ç'
        elif got_resource_raw == 'üâë':
            got_resource = '–ù–∞—Ç—Ä–∏–π'
        elif got_resource_raw == 'üîò':
            got_resource = '–£–≥–ª–µ—Ä–æ–¥'
        elif got_resource_raw == 'üîµ':
            got_resource = '–î–∏–≥–∏–¥—Ä–æ–≥–µ–Ω'
        elif got_resource_raw == 'üîÖ':
            got_resource = '–§–æ—Å—Ñ–æ—Ä'
        elif got_resource_raw == 'üî¥':
            got_resource = '–§–µ—Ä—Ä–∏—Ç–Ω–∞—è –ø—ã–ª—å'
        elif got_resource_raw == 'üü†':
            got_resource = '–ú–µ–¥–Ω–∞—è –ø—ã–ª—å'
        resource_ctx = int(text.split(' (+')[1].split(') ')[0])
        if any(it_d['name'] == got_resource for it_d in const['farm_received']['items']):
            f_it = next(it_d for it_d in const['farm_received']['items'] if it_d['name'] == got_resource)
            it_index = const['farm_received']['items'].index(f_it)
            const['farm_received']['items'][it_index]['ctx'] += resource_ctx
        else:
            const['farm_received']['items'].append({'name': got_resource, 'ctx': resource_ctx})

    update_file('hero', hero)
